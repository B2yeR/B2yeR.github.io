<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Idea+JAVA+MAVEN打包jar方法</title>
      <link href="/posts/MAVEN-IDEA/2018-07-09-Idea-JAVA-MAVEN%E6%89%93%E5%8C%85jar%E6%96%B9%E6%B3%95.html"/>
      <content type="html"><![CDATA[<p>在IDEA中打包java的maven项目为jar<br><a id="more"></a><br>今天购买了IDEA全家桶的正版，体验了MAVEN JAVA的开发，却在最后一步打包jar的时候出现了问题，<br>翻阅网上的资料和复现真理了这些方法：</p><ol><li>用IDEA自带的打包方式[成功过一次,后续还想再研究]</li><li>用Maven插件maven-shade-plugin打包</li><li>用Maven插件maven-assembly-plugin打包<h3 id="用IDEA自带的打包方式"><a href="#用IDEA自带的打包方式" class="headerlink" title="用IDEA自带的打包方式"></a>用IDEA自带的打包方式</h3>打开IDEA的<code>file -&gt; Project Structure</code>,进入配置页面。如：<br><img src="https://img.bug4.cn/post/Idea%2BJAVA%2BMAVEN%E6%89%93%E5%8C%85jar%E6%96%B9%E6%B3%95/TIM%E5%9B%BE%E7%89%8720180709163208.png?x-oss-process=style/bug4.cn" alt=""><br>点击<code>Artifacts</code>，进入<code>Artifacts</code>配置页面，点击 + ，选择如下图的选项。<br>进入<code>Create JAR from Modules</code>页面，按照如下图配置。</li><li>第一步选择Main函数执行的类。</li><li>第二步选择如图的选项，目的是对第三方Jar包打包时做额外的配置，如果不做额外的配置可不选这个选项（但不保证打包成功）</li><li>第三步需要在<code>src/main</code>目录下，新建一个<code>resources</code>目录，将<code>MANIFEST.MF</code>文件保存在这里面，因为如果用默认缺省值的话，在IDEA12版本下会有bug。</li></ol><p>点击OK之后，出现如下图界面，右键点击<code>&lt;output root&gt;</code>，点击<code>Create Directory</code>,创建一个libs，将所有的第三方JAR放进libs目录下。<br><img src="https://img.bug4.cn/post/Idea%2BJAVA%2BMAVEN%E6%89%93%E5%8C%85jar%E6%96%B9%E6%B3%95/2.jpg?x-oss-process=style/bug4.cn" alt=""><br>完成这样操作之后：<br><img src="https://img.bug4.cn/post/Idea%2BJAVA%2BMAVEN%E6%89%93%E5%8C%85jar%E6%96%B9%E6%B3%95/3.jpg?x-oss-process=style/bug4.cn" alt=""><br>放入之后，点击我们要打成的jar的名字，这里面是<code>kafka-cps.jar</code>,选择<code>classpath</code>进行配置。<br>编辑的结果如下：<br><img src="https://img.bug4.cn/post/Idea%2BJAVA%2BMAVEN%E6%89%93%E5%8C%85jar%E6%96%B9%E6%B3%95/4.jpg?x-oss-process=style/bug4.cn" alt=""><br>这里将所有的<code>jar</code>都写在<code>libs/</code>里面。点击<code>OK</code>，回到配置页面。<br>同时还注意在配置页面，勾选<code>build on make</code><br><img src="https://img.bug4.cn/post/Idea%2BJAVA%2BMAVEN%E6%89%93%E5%8C%85jar%E6%96%B9%E6%B3%95/5.jpg?x-oss-process=style/bug4.cn" alt=""><br>最后点击配置页面的<code>OK</code>，完成配置。回到IDEA,点击<code>Build-&gt;Build Artifacts</code>，选择<code>build</code><br><img src="https://img.bug4.cn/post/Idea%2BJAVA%2BMAVEN%E6%89%93%E5%8C%85jar%E6%96%B9%E6%B3%95/6.jpg?x-oss-process=style/bug4.cn" alt=""><br>就会生成我们需要的jar包。其位置在项目目录的out目录下/out/artifacts/kafka_cps_jar。<br>下面放一个正确配置的清单文件内容<br><img src="https://img.bug4.cn/post/Idea%2BJAVA%2BMAVEN%E6%89%93%E5%8C%85jar%E6%96%B9%E6%B3%95/7.jpg?x-oss-process=style/bug4.cn" alt=""></p><h3 id="用MAVEN的maven-shade-plugin插件打包"><a href="#用MAVEN的maven-shade-plugin插件打包" class="headerlink" title="用MAVEN的maven-shade-plugin插件打包"></a>用MAVEN的maven-shade-plugin插件打包</h3><p>其实我最喜欢的还是用MAVEN的插件打包，这样方便又舒服 嗯~~<br>在POM.xml文件中加入如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt; </span><br><span class="line">  &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;  </span><br><span class="line">  &lt;artifactId&gt;maven-shade-plugin&lt;/artifactId&gt;  </span><br><span class="line">  &lt;version&gt;1.4&lt;/version&gt;  </span><br><span class="line">  &lt;configuration&gt; </span><br><span class="line">    &lt;createDependencyReducedPom&gt;true&lt;/createDependencyReducedPom&gt; </span><br><span class="line">  &lt;/configuration&gt;  </span><br><span class="line">  &lt;executions&gt; </span><br><span class="line">    &lt;execution&gt; </span><br><span class="line">      &lt;phase&gt;package&lt;/phase&gt;  </span><br><span class="line">      &lt;goals&gt; </span><br><span class="line">        &lt;goal&gt;shade&lt;/goal&gt; </span><br><span class="line">      &lt;/goals&gt;  </span><br><span class="line">      &lt;configuration&gt; </span><br><span class="line">        &lt;transformers&gt; </span><br><span class="line">          &lt;transformer implementation=&quot;org.apache.maven.plugins.shade.resource.ManifestResourceTransformer&quot;&gt; </span><br><span class="line">            &lt;mainClass&gt;Main.Main&lt;/mainClass&gt; </span><br><span class="line">          &lt;/transformer&gt; </span><br><span class="line">        &lt;/transformers&gt; </span><br><span class="line">      &lt;/configuration&gt; </span><br><span class="line">    &lt;/execution&gt; </span><br><span class="line">  &lt;/executions&gt; </span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure></p><p>这里面配置了一个 <code>configuration</code>标签内容，在此标签下面 有一个<code>transformer</code>标签，用来配置Main函数的入口<code>&lt;mainClass&gt;Main.Main&lt;/mainClass&gt;</code>，当然此标签内容很复杂，不是上面写的那么简单，上面之所以如此简单，是因为在所有类中(包括第三方Jar)只有一个Main方法。如果第三方jar中有Main方法，就要进行额外的配置，上面这么配置，不一定能执行成功。<br>具体可以参见<a href="http://blog.csdn.net/defonds/article/details/43233131" target="_blank" rel="noopener">maven插件</a>。<br>在加入这段代码到pom.xml之后，我们就可以用maven的命令去打包了。其指令如下：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mvn clean compile //清除之前target编译文件并重新编译</span><br><span class="line">mvn clean package //对项目进行打包(因为配置过插件，所以jar包是可执行的)</span><br><span class="line">mvn clean install //安装项目，然后就可以使用了</span><br></pre></td></tr></table></figure></p><p>然后通过<code>java -jar cps-1.0-SNAPSHOT.jar</code>运行。<br>如果使用IDEA的话，可以通过自带的maven管理工具代替执行上面的命令。如下图所示，依次点击蓝色的部分。<br><img src="https://img.bug4.cn/post/Idea%2BJAVA%2BMAVEN%E6%89%93%E5%8C%85jar%E6%96%B9%E6%B3%95/8.jpg?x-oss-process=style/bug4.cn" alt=""></p><h3 id="用maven-assembly-plugin打包"><a href="#用maven-assembly-plugin打包" class="headerlink" title="用maven-assembly-plugin打包"></a>用maven-assembly-plugin打包</h3><p>上面的方法，我们还需要点击很多命令去打包。这次利用一个新的插件，可以打包更简单。同样，在pom.xml中加入如下代码。上文的<code>maven-shade-plugin</code>插件代码可以删除。最好不要写2个插件代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugins&gt;</span><br><span class="line">          &lt;plugin&gt;</span><br><span class="line">              &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">              &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;</span><br><span class="line">              &lt;version&gt;2.3&lt;/version&gt;</span><br><span class="line">              &lt;configuration&gt;</span><br><span class="line">                  &lt;appendAssemblyId&gt;false&lt;/appendAssemblyId&gt;</span><br><span class="line">                  &lt;descriptorRefs&gt;</span><br><span class="line">                      &lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt;</span><br><span class="line">                  &lt;/descriptorRefs&gt;</span><br><span class="line">                  &lt;archive&gt;</span><br><span class="line">                      &lt;manifest&gt;</span><br><span class="line">                          &lt;mainClass&gt;book.StartRegBooks&lt;/mainClass&gt;</span><br><span class="line">                      &lt;/manifest&gt;</span><br><span class="line">                  &lt;/archive&gt;</span><br><span class="line">              &lt;/configuration&gt;</span><br><span class="line">              &lt;executions&gt;</span><br><span class="line">                  &lt;execution&gt;</span><br><span class="line">                      &lt;id&gt;make-assembly&lt;/id&gt;</span><br><span class="line">                      &lt;phase&gt;package&lt;/phase&gt;</span><br><span class="line">                      &lt;goals&gt;</span><br><span class="line">                          &lt;goal&gt;assembly&lt;/goal&gt;</span><br><span class="line">                      &lt;/goals&gt;</span><br><span class="line">                  &lt;/execution&gt;</span><br><span class="line">              &lt;/executions&gt;</span><br><span class="line">          &lt;/plugin&gt;</span><br><span class="line">          &lt;plugin&gt;</span><br><span class="line">              &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">              &lt;configuration&gt;</span><br><span class="line">                  &lt;source&gt;1.8&lt;/source&gt;</span><br><span class="line">                  &lt;target&gt;1.8&lt;/target&gt;</span><br><span class="line">                  &lt;encoding&gt;utf8&lt;/encoding&gt;</span><br><span class="line">              &lt;/configuration&gt;</span><br><span class="line">          &lt;/plugin&gt;</span><br><span class="line">      &lt;/plugins&gt;</span><br></pre></td></tr></table></figure></p><p>这里同样配置了一个<code>manifest</code>标签来配置Main函数的入口。然后通过如下指令来实现打包。<br><code>mvn assembly:assembly</code><br>如果使用IDEA的话，可以通过自带的maven管理工具代替执行上面的命令。如下图所示，点击蓝色的部分。<br><img src="https://img.bug4.cn/post/Idea%2BJAVA%2BMAVEN%E6%89%93%E5%8C%85jar%E6%96%B9%E6%B3%95/9.jpg?x-oss-process=style/bug4.cn" alt=""><br>然后通过执行<code>java -jar cps-1.0-SNAPSHOT-jar-with-dependencies.jar</code>运行。</p>]]></content>
      
      <categories>
          
          <category> MAVEN,IDEA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> MAVEN </tag>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SpringBoot热部署：spring-boot-devtools在Idea中热部署方法</title>
      <link href="/posts/SpringBoot/%E7%83%AD%E9%83%A8%E7%BD%B2/Idea/2018-06-23-SpringBoot%E7%83%AD%E9%83%A8%E7%BD%B2%EF%BC%9Aspring-boot-devtools%E5%9C%A8Idea%E4%B8%AD%E7%83%AD%E9%83%A8%E7%BD%B2%E6%96%B9%E6%B3%95.html"/>
      <content type="html"><![CDATA[<p>今天群里有哥们问到了热部署得问题<br>身为JAVA程序员，等待代码编译是一件痛苦的事情。况且追求高效是程序员所具有的一种天然品性。<br>在接触强大的springboot框架过程中，每次修改代码后，都要重新启动。我就想，肯定有方法可以实现代码修改后热加载/部署，果不其然，springboot早已为我们准备了解决方案，且方便快捷。收集了一些资料后，亲身验证，以下方法可行，请参照以下方法设置。（本文以idea 为例子）<br><a id="more"></a></p><h3 id="第一步：增加POM-XML文件中得依赖"><a href="#第一步：增加POM-XML文件中得依赖" class="headerlink" title="第一步：增加POM.XML文件中得依赖"></a>第一步：增加POM.XML文件中得依赖</h3><p><code>**注：**热部署功能spring-boot-1.3开始有的</code><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;  </span><br><span class="line">     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;  </span><br><span class="line">     &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;  </span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p><code>**注**：project 中添加 spring-boot-maven-plugin,主要在eclipse中使用，idea中不需要添加此配置。</code></p><h3 id="第二步：更改idea配置"><a href="#第二步：更改idea配置" class="headerlink" title="第二步：更改idea配置"></a>第二步：更改idea配置</h3><p>勾选 <strong>Build Project Automatically</strong><br><img src="https://img.bug4.cn/post/2018-06-23-SpringBoot%E7%83%AD%E9%83%A8%E7%BD%B2%EF%BC%9Aspring-boot-devtools%E5%9C%A8Idea%E4%B8%AD%E7%83%AD%E9%83%A8%E7%BD%B2%E6%96%B9%E6%B3%95/2018-06-23-15-59-10.jpg?x-oss-process=style/bug4.cn" alt=""></p><h3 id="第三步-按-Shift-Ctrl-A-windows-mac是-command-shift-A"><a href="#第三步-按-Shift-Ctrl-A-windows-mac是-command-shift-A" class="headerlink" title="第三步: 按 Shift+Ctrl+A (windows,mac是 command+shift+A)"></a>第三步: 按 Shift+Ctrl+A (windows,mac是 command+shift+A)</h3><p>将看到弹窗 <strong>Enter Action or option name</strong>，输入<strong>“registry”</strong>，双击第一项<strong>“Registry…”</strong> ，会弹出另一个窗口，寻找<br><code>compiler.automake.allow.when.app.running</code><br>这一项，并勾选开启。然后关闭窗口。<br><img src="https://img.bug4.cn/post/2018-06-23-SpringBoot%E7%83%AD%E9%83%A8%E7%BD%B2%EF%BC%9Aspring-boot-devtools%E5%9C%A8Idea%E4%B8%AD%E7%83%AD%E9%83%A8%E7%BD%B2%E6%96%B9%E6%B3%95/2018-06-23-16-08-48.jpg?x-oss-process=style/bug4.cn" alt=""></p><p><img src="https://img.bug4.cn/post/2018-06-23-SpringBoot%E7%83%AD%E9%83%A8%E7%BD%B2%EF%BC%9Aspring-boot-devtools%E5%9C%A8Idea%E4%B8%AD%E7%83%AD%E9%83%A8%E7%BD%B2%E6%96%B9%E6%B3%95/2018-06-23-16-08-54.jpg?x-oss-process=style/bug4.cn" alt=""></p><h3 id="第四步：重启-IDE"><a href="#第四步：重启-IDE" class="headerlink" title="第四步：重启 IDE"></a>第四步：重启 IDE</h3><h3 id="第五步：Chrome禁用缓存"><a href="#第五步：Chrome禁用缓存" class="headerlink" title="第五步：Chrome禁用缓存"></a>第五步：Chrome禁用缓存</h3><p>F12或者<strong>“Ctrl+Shift+I”</strong>，打开开发者工具，<strong>“Network”</strong> 选项卡下 选中打勾 <strong>“Disable Cache(while DevTools is open)” </strong></p><p><strong>转自：</strong><a href="https://blog.csdn.net/dujianxiong/article/details/78957701" target="_blank" rel="noopener">https://blog.csdn.net/dujianxiong/article/details/78957701</a></p>]]></content>
      
      <categories>
          
          <category> SpringBoot </category>
          
          <category> 热部署 </category>
          
          <category> Idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> 热部署 </tag>
            
            <tag> Idea </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PHP STR FORMAT</title>
      <link href="/posts/PHP/2018-06-23-PHP-STR-FORMAT.html"/>
      <content type="html"><![CDATA[<p>PHP学习基础之字符串函数相关系列<br><a id="more"></a></p><h3 id="1-sprintf-函数"><a href="#1-sprintf-函数" class="headerlink" title="1.sprintf 函数"></a>1.sprintf 函数</h3><p><strong>描述：</strong>格式化字符串<br><strong>语法：</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sprintf(format,arg1,arg2,arg++)</span><br></pre></td></tr></table></figure></p><p><strong>定义和用法：</strong><br>sprintf() 函数把格式化的字符串写入变量中。<br>arg1、arg2、++ 参数将被插入到主字符串中的百分号（%）符号处。该函数是逐步执行的。在第一个 % 符号处，插入 arg1，在第二个 % 符号处，插入 arg2，依此类推。<br><strong>注释：</strong><br>如果 % 符号多于 arg 参数，则您必须使用占位符。占位符位于 % 符号之后，由数字和 “\$” 组成。</p><hr><ol><li>format<br>必需。规定字符串以及如何格式化其中的变量。<br>可能的值有：<ol><li>%% - 返回一个百分号 %</li><li>%b - 二进制数</li><li>%c - ASCII 值对应的字符</li><li>%d - 包含正负号的十进制数（负数、0、正数）</li><li>%e - 使用小写的科学计数法（例如 1.2e+2）</li><li>%E - 使用大写的科学计数法（例如 1.2E+2）</li><li>%u - 不包含正负号的十进制数（大于等于 0）</li><li>%f - 浮点数（本地设置）</li><li>%F - 浮点数（非本地设置）</li><li>%g - 较短的 %e 和 %f</li><li>%G - 较短的 %E 和 %f</li><li>%o - 八进制数</li><li>%s - 字符串</li><li>%x - 十六进制数（小写字母）</li><li>%X - 十六进制数（大写字母）<br>附加的格式值。必需放置在 % 和字母之间（例如 %.2f）：</li></ol></li></ol><ul><li><code>+ （在数字前面加上 + 或 - 来定义数字的正负性。默认情况下，只有负数才做标记，正数不做标记）</code></li><li><code>&#39; （规定使用什么作为填充，默认是空格。它必须与宽度指定器一起使用。例如：%&#39;x20s（使用 &quot;x&quot; 作为填充））</code></li><li><code>- （左调整变量值）</code></li><li><code>[0-9] （规定变量值的最小宽度）</code></li><li><code>.[0-9] （规定小数位数或最大字符串长度）</code></li></ul><p><strong>注释：</strong>如果使用多个上述的格式值，它们必须按照以上顺序使用。</p>]]></content>
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo-Next-Go ......开始写作吧！</title>
      <link href="/posts/Hexo/2018-05-05-Hexo-Next-Go.html"/>
      <content type="html"><![CDATA[<p>在这里说明下，这篇文章主要是记录下我在刚开始操作Hexo-Next时候如何去写的一些简单操作！Let’s Go！<br><a id="more"></a></p><h3 id="1-文章的创建和删除"><a href="#1-文章的创建和删除" class="headerlink" title="1.文章的创建和删除"></a>1.文章的创建和删除</h3><p><strong>.</strong> 创建文章<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd you-site</span><br><span class="line">$ hexo new post &quot;you title&quot;</span><br></pre></td></tr></table></figure></p><p><strong>.</strong> 文章的目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">you-site/source/_posts</span><br></pre></td></tr></table></figure></p><p><strong>.</strong> 删除文章<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">在/source/_posts/中直接删除了相应的.md文件</span><br><span class="line">$ hexo g</span><br></pre></td></tr></table></figure></p><h3 id="2-标签"><a href="#2-标签" class="headerlink" title="2.标签"></a>2.标签</h3><p><strong>.</strong> hexo初始是没有<code>标签</code>目录的需要自己创建<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd you-site</span><br><span class="line">$ hexo new page tags</span><br></pre></td></tr></table></figure></p><p><strong>.</strong> 创建完成后,打开<code>you-site/source/tags</code>的<code>index.md</code>,修改如下</p><hr><p>到这里基本上的东西都已经差不多了,那么是时候开始写作了。 </p>]]></content>
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo-Next-主题优化(一)</title>
      <link href="/posts/Hexo/2018-04-02-Hexo-Next-%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96-%E4%B8%80.html"/>
      <content type="html"><![CDATA[<ul><li>Hexo版本是3.3.8</li><li>NexT.Pisces v5.1.2<a id="more"></a></li></ul><ol><li>常用命令</li></ol><ul><li>Hexo的命令极简单，安装后只需要记住四个常用的即可。执行命令需要Git当前处于blog文件夹根目录下</li><li>generate 生成静态文件。     <code>hexo g</code></li><li>server 启动服务器。     <code>hexo s</code></li><li>deploy 部署网站。部署网站前，需要预先生成静态文件。  <code>hexo d</code></li><li>clean 清除缓存文件 (db.json) 和已生成的静态文件 (public)。  <code>hexo clean</code></li><li>卸载Hexo  <code>npm uninstall hexo-cli -g</code></li></ul><ol><li>更换主题,以NEXT主题为列<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd your-hexo-site</span><br><span class="line">$ git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></li></ol><ul><li>修改<code>Hexo</code> 站点目录下的<code>_config.yml</code>的主题<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: next</span><br></pre></td></tr></table></figure></li></ul><h2 id="下面就来说说我这个blog对于Next主题的操作地方"><a href="#下面就来说说我这个blog对于Next主题的操作地方" class="headerlink" title="下面就来说说我这个blog对于Next主题的操作地方"></a>下面就来说说我这个blog对于Next主题的操作地方</h2><h3 id="1-基本设置："><a href="#1-基本设置：" class="headerlink" title="1.基本设置："></a>1.基本设置：</h3><p>打开<code>Hexo 站点</code>目录下的<code>_config.yml</code>修改内容如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: Hexo #网站标题</span><br><span class="line">subtitle: #网站副标题</span><br><span class="line">description: #网站描述</span><br><span class="line">author: author #您的名字</span><br><span class="line">language: zh-Hans #网站使用的语言</span><br><span class="line">timezone: Asia/Shanghai #网站时区。Hexo 默认使用您电脑的时区。</span><br></pre></td></tr></table></figure></p><h3 id="2-设置主题风格"><a href="#2-设置主题风格" class="headerlink" title="2.设置主题风格:"></a>2.设置主题风格:</h3><p>打开<code>themes/next</code>下的<code>_config.ym</code>l文件，搜索<code>scheme</code> 关键字，将你需用启用的<code>scheme</code>前面注释 # 去除即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># ---------------------------------------------------------------</span><br><span class="line"># Scheme Settings</span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"># Schemes</span><br><span class="line">#scheme: Muse # 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白</span><br><span class="line">#scheme: Mist # Muse 的紧凑版本，整洁有序的单栏外观</span><br><span class="line">scheme: Pisces # 双栏 Scheme，小家碧玉似的清新</span><br><span class="line">#scheme: Gemini # 类似 Pisces</span><br></pre></td></tr></table></figure></p><h3 id="3-添加头像"><a href="#3-添加头像" class="headerlink" title="3.添加头像"></a>3.添加头像</h3><p>打开<code>themes/next</code>下的<code>_config.yml</code>文件，搜索 <code>Sidebar Avatar</code>关键字，去掉<code>avatar</code>前面的<code>#</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Sidebar Avatar</span><br><span class="line"># in theme directory(source/images): /images/avatar.jpg</span><br><span class="line"># in site  directory(source/uploads): /uploads/avatar.jpg</span><br><span class="line">avatar: http://example.com/avatar.png</span><br></pre></td></tr></table></figure></p><h3 id="4-设置浏览页面的时候显示页面进度"><a href="#4-设置浏览页面的时候显示页面进度" class="headerlink" title="4.设置浏览页面的时候显示页面进度"></a>4.设置浏览页面的时候显示页面进度</h3><p>打开<code>themes/next</code>下的<code>_config.yml</code>,设置<code>scrollpercent</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Scroll percent label in b2t button</span><br><span class="line"> scrollpercent: true</span><br></pre></td></tr></table></figure></p><p>如果想把<code>top</code>按钮放在侧边栏,打开<code>themes/next</code>下的<code>_config.yml</code>,搜索关键字<code>b2t</code>,把<code>false</code>改为<code>true</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Back to top in sidebar</span><br><span class="line">  b2t: true</span><br><span class="line"></span><br><span class="line">  # Scroll percent label in b2t button</span><br><span class="line">  scrollpercent: true</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>初探Hexo</title>
      <link href="/posts/Hexo/2018-03-17-%E5%88%9D%E6%8E%A2Hexo.html"/>
      <content type="html"><![CDATA[<p>人闲起来真是可怕，本来已经折腾过了jekyll和Ghost，静态和动态博客也都尝了遍鲜，然而还是按捺不住寂寞又折腾起来Hexo。<br><a id="more"></a></p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>博客从2016年服务器炸了之后就再也没开过,这几天学习<strong>PHP</strong>和<strong>Go</strong>发现每次记录的东西到有道笔记中会忘记，那么还是想着用blog的方式记录下学习过程，一方面是增加记忆力，另一方面嘛 : 能够明显的看到你每天学习了些什么。记得以前用的是emblog <del>但是好像倒闭了</del> ,有好多好朋友都在用Hexo，那么自己也有那么一点点鸡动；二话不说直接开干好么……</p><hr><p><code>当前缩写的操作步奏全部来源于Hexo官方Doc</code>  <a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">Hexo.io</a></p><hr><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>官方说:安装Node.js的最佳方式是使用<a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">nvm</a><br>cURL:<br><code>$ curl https://raw.github.com/creationix/nvm/master/install.sh | sh</code><br>Wget:<br><code>$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh</code><br>安装完成后，重启终端并执行下列命令即可安装 Node.js。<br><code>$ nvm install stable</code></p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。<br><code>$ npm install -g hexo-cli</code></p><hr><h2 id="开始建站"><a href="#开始建站" class="headerlink" title="开始建站"></a>开始建站</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ cd &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>具体请移步: <a href="https://hexo.io/zh-cn/docs/setup.html" target="_blank" rel="noopener">Hexo 建站</a></p>]]></content>
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
